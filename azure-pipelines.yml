trigger:
- development

variables:
  - group: DockerCredentials  # Link the Docker credentials variable group

stages:
# Build and Test Stage
- stage: Build
  displayName: 'Build and Test Stage'
  jobs:
  - job: BuildAndTest
    displayName: 'Install and Run Tests'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.x'
      displayName: 'Set Up Python 3.x'

    - script: |
        python -m pip install --upgrade pip
      displayName: 'Upgrade Pip'

    - script: |
        python -m unittest test_todo.py
      displayName: 'Run Unit Tests'

    # Publish Artifacts
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)'
        ArtifactName: 'ToDoApp-Build'
      displayName: 'Publish Build Artifacts'

# Deploy to Test Environment
- stage: DeployToTest
  displayName: 'Deploy to Test Environment'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: TestDeploy
    displayName: 'Deploy to Test'
    environment: 'Test'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: echo "Deploying To-Do List App to Test Environment"
            displayName: 'Deploy Step'

# Security Testing Stage
# Security Testing Stage with npm audit
- stage: SecurityTesting
  displayName: 'Run Security Testing'
  dependsOn: DeployToTest
  condition: succeeded()
  jobs:
  - job: NpmAudit
    displayName: 'Run npm Audit'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UseNode@1
      inputs:
        version: '18.x'
      displayName: 'Set Up Node.js'

    - script: |
        npm install
        npm audit --audit-level=high > npm-audit-report.txt || true
      displayName: 'Run npm Audit'

    # Publish Security Report
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: 'npm-audit-report.txt'
        ArtifactName: 'NpmAudit-Report'
      displayName: 'Publish npm Audit Report'

# Deploy to Production Environment
- stage: DeployToProduction
  displayName: 'Deploy to Production Environment'
  dependsOn: SecurityTesting
  condition: succeeded()
  jobs:
  - deployment: ProdDeploy
    displayName: 'Deploy to Production'
    environment: 'Production'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: echo "Deploying To-Do List App to Production Environment"
            displayName: 'Deploy Step'
